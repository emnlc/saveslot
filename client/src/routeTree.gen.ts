/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UpcomingIndexRouteImport } from './routes/upcoming/index'
import { Route as SignUpIndexRouteImport } from './routes/sign-up/index'
import { Route as NewlyReleasedIndexRouteImport } from './routes/newly-released/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as GamesIndexRouteImport } from './routes/games/index'
import { Route as AllGamesIndexRouteImport } from './routes/all-games/index'
import { Route as UUsernameRouteImport } from './routes/u/$username'
import { Route as GamesGamesSlugRouteImport } from './routes/games/$gamesSlug'
import { Route as UUsernameProfileRouteImport } from './routes/u/$username/_profile'
import { Route as UUsernameProfileIndexRouteImport } from './routes/u/$username/_profile.index'
import { Route as UUsernameListListRouteImport } from './routes/u/$username/list/_list'
import { Route as UUsernameProfileListsRouteImport } from './routes/u/$username/_profile.lists'
import { Route as UUsernameListListListslugRouteImport } from './routes/u/$username/list/_list.$listslug'

const UUsernameListRouteImport = createFileRoute('/u/$username/list')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UpcomingIndexRoute = UpcomingIndexRouteImport.update({
  id: '/upcoming/',
  path: '/upcoming/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpIndexRoute = SignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => rootRouteImport,
} as any)
const NewlyReleasedIndexRoute = NewlyReleasedIndexRouteImport.update({
  id: '/newly-released/',
  path: '/newly-released/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesIndexRoute = GamesIndexRouteImport.update({
  id: '/games/',
  path: '/games/',
  getParentRoute: () => rootRouteImport,
} as any)
const AllGamesIndexRoute = AllGamesIndexRouteImport.update({
  id: '/all-games/',
  path: '/all-games/',
  getParentRoute: () => rootRouteImport,
} as any)
const UUsernameRoute = UUsernameRouteImport.update({
  id: '/u/$username',
  path: '/u/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesGamesSlugRoute = GamesGamesSlugRouteImport.update({
  id: '/games/$gamesSlug',
  path: '/games/$gamesSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const UUsernameListRoute = UUsernameListRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => UUsernameRoute,
} as any)
const UUsernameProfileRoute = UUsernameProfileRouteImport.update({
  id: '/_profile',
  getParentRoute: () => UUsernameRoute,
} as any)
const UUsernameProfileIndexRoute = UUsernameProfileIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UUsernameProfileRoute,
} as any)
const UUsernameListListRoute = UUsernameListListRouteImport.update({
  id: '/_list',
  getParentRoute: () => UUsernameListRoute,
} as any)
const UUsernameProfileListsRoute = UUsernameProfileListsRouteImport.update({
  id: '/lists',
  path: '/lists',
  getParentRoute: () => UUsernameProfileRoute,
} as any)
const UUsernameListListListslugRoute =
  UUsernameListListListslugRouteImport.update({
    id: '/$listslug',
    path: '/$listslug',
    getParentRoute: () => UUsernameListListRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/games/$gamesSlug': typeof GamesGamesSlugRoute
  '/u/$username': typeof UUsernameProfileRouteWithChildren
  '/all-games': typeof AllGamesIndexRoute
  '/games': typeof GamesIndexRoute
  '/login': typeof LoginIndexRoute
  '/newly-released': typeof NewlyReleasedIndexRoute
  '/sign-up': typeof SignUpIndexRoute
  '/upcoming': typeof UpcomingIndexRoute
  '/u/$username/lists': typeof UUsernameProfileListsRoute
  '/u/$username/list': typeof UUsernameListListRouteWithChildren
  '/u/$username/': typeof UUsernameProfileIndexRoute
  '/u/$username/list/$listslug': typeof UUsernameListListListslugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/games/$gamesSlug': typeof GamesGamesSlugRoute
  '/u/$username': typeof UUsernameProfileIndexRoute
  '/all-games': typeof AllGamesIndexRoute
  '/games': typeof GamesIndexRoute
  '/login': typeof LoginIndexRoute
  '/newly-released': typeof NewlyReleasedIndexRoute
  '/sign-up': typeof SignUpIndexRoute
  '/upcoming': typeof UpcomingIndexRoute
  '/u/$username/lists': typeof UUsernameProfileListsRoute
  '/u/$username/list': typeof UUsernameListListRouteWithChildren
  '/u/$username/list/$listslug': typeof UUsernameListListListslugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/games/$gamesSlug': typeof GamesGamesSlugRoute
  '/u/$username': typeof UUsernameRouteWithChildren
  '/all-games/': typeof AllGamesIndexRoute
  '/games/': typeof GamesIndexRoute
  '/login/': typeof LoginIndexRoute
  '/newly-released/': typeof NewlyReleasedIndexRoute
  '/sign-up/': typeof SignUpIndexRoute
  '/upcoming/': typeof UpcomingIndexRoute
  '/u/$username/_profile': typeof UUsernameProfileRouteWithChildren
  '/u/$username/_profile/lists': typeof UUsernameProfileListsRoute
  '/u/$username/list': typeof UUsernameListRouteWithChildren
  '/u/$username/list/_list': typeof UUsernameListListRouteWithChildren
  '/u/$username/_profile/': typeof UUsernameProfileIndexRoute
  '/u/$username/list/_list/$listslug': typeof UUsernameListListListslugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/games/$gamesSlug'
    | '/u/$username'
    | '/all-games'
    | '/games'
    | '/login'
    | '/newly-released'
    | '/sign-up'
    | '/upcoming'
    | '/u/$username/lists'
    | '/u/$username/list'
    | '/u/$username/'
    | '/u/$username/list/$listslug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/games/$gamesSlug'
    | '/u/$username'
    | '/all-games'
    | '/games'
    | '/login'
    | '/newly-released'
    | '/sign-up'
    | '/upcoming'
    | '/u/$username/lists'
    | '/u/$username/list'
    | '/u/$username/list/$listslug'
  id:
    | '__root__'
    | '/'
    | '/games/$gamesSlug'
    | '/u/$username'
    | '/all-games/'
    | '/games/'
    | '/login/'
    | '/newly-released/'
    | '/sign-up/'
    | '/upcoming/'
    | '/u/$username/_profile'
    | '/u/$username/_profile/lists'
    | '/u/$username/list'
    | '/u/$username/list/_list'
    | '/u/$username/_profile/'
    | '/u/$username/list/_list/$listslug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GamesGamesSlugRoute: typeof GamesGamesSlugRoute
  UUsernameRoute: typeof UUsernameRouteWithChildren
  AllGamesIndexRoute: typeof AllGamesIndexRoute
  GamesIndexRoute: typeof GamesIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  NewlyReleasedIndexRoute: typeof NewlyReleasedIndexRoute
  SignUpIndexRoute: typeof SignUpIndexRoute
  UpcomingIndexRoute: typeof UpcomingIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/upcoming/': {
      id: '/upcoming/'
      path: '/upcoming'
      fullPath: '/upcoming'
      preLoaderRoute: typeof UpcomingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up/': {
      id: '/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/newly-released/': {
      id: '/newly-released/'
      path: '/newly-released'
      fullPath: '/newly-released'
      preLoaderRoute: typeof NewlyReleasedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/': {
      id: '/games/'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/all-games/': {
      id: '/all-games/'
      path: '/all-games'
      fullPath: '/all-games'
      preLoaderRoute: typeof AllGamesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/u/$username': {
      id: '/u/$username'
      path: '/u/$username'
      fullPath: '/u/$username'
      preLoaderRoute: typeof UUsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games/$gamesSlug': {
      id: '/games/$gamesSlug'
      path: '/games/$gamesSlug'
      fullPath: '/games/$gamesSlug'
      preLoaderRoute: typeof GamesGamesSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/u/$username/list': {
      id: '/u/$username/list'
      path: '/list'
      fullPath: '/u/$username/list'
      preLoaderRoute: typeof UUsernameListRouteImport
      parentRoute: typeof UUsernameRoute
    }
    '/u/$username/_profile': {
      id: '/u/$username/_profile'
      path: ''
      fullPath: '/u/$username'
      preLoaderRoute: typeof UUsernameProfileRouteImport
      parentRoute: typeof UUsernameRoute
    }
    '/u/$username/_profile/': {
      id: '/u/$username/_profile/'
      path: '/'
      fullPath: '/u/$username/'
      preLoaderRoute: typeof UUsernameProfileIndexRouteImport
      parentRoute: typeof UUsernameProfileRoute
    }
    '/u/$username/list/_list': {
      id: '/u/$username/list/_list'
      path: '/list'
      fullPath: '/u/$username/list'
      preLoaderRoute: typeof UUsernameListListRouteImport
      parentRoute: typeof UUsernameListRoute
    }
    '/u/$username/_profile/lists': {
      id: '/u/$username/_profile/lists'
      path: '/lists'
      fullPath: '/u/$username/lists'
      preLoaderRoute: typeof UUsernameProfileListsRouteImport
      parentRoute: typeof UUsernameProfileRoute
    }
    '/u/$username/list/_list/$listslug': {
      id: '/u/$username/list/_list/$listslug'
      path: '/$listslug'
      fullPath: '/u/$username/list/$listslug'
      preLoaderRoute: typeof UUsernameListListListslugRouteImport
      parentRoute: typeof UUsernameListListRoute
    }
  }
}

interface UUsernameProfileRouteChildren {
  UUsernameProfileListsRoute: typeof UUsernameProfileListsRoute
  UUsernameProfileIndexRoute: typeof UUsernameProfileIndexRoute
}

const UUsernameProfileRouteChildren: UUsernameProfileRouteChildren = {
  UUsernameProfileListsRoute: UUsernameProfileListsRoute,
  UUsernameProfileIndexRoute: UUsernameProfileIndexRoute,
}

const UUsernameProfileRouteWithChildren =
  UUsernameProfileRoute._addFileChildren(UUsernameProfileRouteChildren)

interface UUsernameListListRouteChildren {
  UUsernameListListListslugRoute: typeof UUsernameListListListslugRoute
}

const UUsernameListListRouteChildren: UUsernameListListRouteChildren = {
  UUsernameListListListslugRoute: UUsernameListListListslugRoute,
}

const UUsernameListListRouteWithChildren =
  UUsernameListListRoute._addFileChildren(UUsernameListListRouteChildren)

interface UUsernameListRouteChildren {
  UUsernameListListRoute: typeof UUsernameListListRouteWithChildren
}

const UUsernameListRouteChildren: UUsernameListRouteChildren = {
  UUsernameListListRoute: UUsernameListListRouteWithChildren,
}

const UUsernameListRouteWithChildren = UUsernameListRoute._addFileChildren(
  UUsernameListRouteChildren,
)

interface UUsernameRouteChildren {
  UUsernameProfileRoute: typeof UUsernameProfileRouteWithChildren
  UUsernameListRoute: typeof UUsernameListRouteWithChildren
}

const UUsernameRouteChildren: UUsernameRouteChildren = {
  UUsernameProfileRoute: UUsernameProfileRouteWithChildren,
  UUsernameListRoute: UUsernameListRouteWithChildren,
}

const UUsernameRouteWithChildren = UUsernameRoute._addFileChildren(
  UUsernameRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GamesGamesSlugRoute: GamesGamesSlugRoute,
  UUsernameRoute: UUsernameRouteWithChildren,
  AllGamesIndexRoute: AllGamesIndexRoute,
  GamesIndexRoute: GamesIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  NewlyReleasedIndexRoute: NewlyReleasedIndexRoute,
  SignUpIndexRoute: SignUpIndexRoute,
  UpcomingIndexRoute: UpcomingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
